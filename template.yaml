# prettier-ignore
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    BuildLog

    Holds the lambda and s3 functions for the server

Globals:
    Api:
        BinaryMediaTypes:
          - "multipart/form-data"
          - "application/json"
        Cors:
            AllowMethods: "'GET,POST,OPTIONS,PUT,DELETE'"
            AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
            AllowOrigin: "'*'"
    Function:
        Timeout: 100
        MemorySize: 128
        Runtime: nodejs18.x
        Architectures: [x86_64]
        Layers:
          - !Ref CRUDDependencyLayer
        Environment:
            Variables:
                REGION_NAME: 'ap-southeast-2'
                DYNAMO_TABLE: !Ref PostsDynamoDbTable
                DYNAMO_TABLE_NAME: 'post-tables'
                S3_BUCKET_NAME: 's3-lambda-stack-srcbucket-dpcaitz3x0hb'
                CLOUDFRONT_URL: 'https://dnhi95iahz2rb.cloudfront.net/'
                POST_ID: '1'
                CLOUDFRONT_DIST_ID: 'EZNO0Z42COR2A'
Resources:

    UploadPostToDynamo:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            Policies:
              - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
              - S3CrudPolicy:
                    BucketName: !Ref S3UploadBucket
            Handler: dist/posts/savePost.save_post_to_dynamodb
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /savePost
                        Method: POST

    GetPostsFromDynamo:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: dist/posts/getPosts.get_posts_from_dynamodb
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /getPosts
                        Method: GET
    
    GetTableData:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: dist/table/getTableData.get_table_data
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /getTableData
                        Method: GET

    DeletePostFromDynamo:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            Policies:
              - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
              - S3CrudPolicy:
                    BucketName: !Ref S3UploadBucket
              - !Ref CloudFrontInvalidationPolicy
            Handler: dist/posts/deletePost.delete_post_from_dynamodb
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /deletePost/{postId}
                        Method: DELETE

    UpdatePostInDynamo:
        Type: AWS::Serverless::Function
        Metadata:
            BuildMethod: makefile
        Properties:
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Ref PostsDynamoDbTable
            Handler: dist/posts/updatePost.update_post_in_dynamodb
            Events:
                Api:
                    Type: Api
                    Properties:
                        Path: /updatePost/{postId}
                        Method: PUT

    PostsDynamoDbTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
              - AttributeName: id
                AttributeType: S
              - AttributeName: createdAt  
                AttributeType: S 
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: createdAt  # Set the sort key
                KeyType: RANGE
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
            TableName: 'post-tables'

    CRUDDependencyLayer:
        Type: AWS::Serverless::LayerVersion
        Metadata:
            BuildMethod: makefile
        Properties:
            Description: Dependencies for lambdas
            ContentUri: ./
            CompatibleRuntimes:
              - nodejs18.x
            LicenseInfo: 'MIT'
            RetentionPolicy: Retain

    S3UploadBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: 's3-lambda-stack-srcbucket-dpcaitz3x0hb'
            CorsConfiguration:  # Indentation fixed here
                CorsRules:
                  - AllowedHeaders:
                      - "*"
                    AllowedMethods:
                      - GET
                      - PUT
                      - POST
                      - DELETE
                      - HEAD
                    AllowedOrigins:
                      - "*"

    CloudFrontInvalidationPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: MyApiPolicy
            PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - cloudfront:CreateInvalidation
                    Resource: "*"

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
